<?xml version="1.0"?>
<project name="bbv.Common" default="build" xmlns="http://nant.sf.net/release/0.85/nant.xsd">
	<description>
    Contains targets to
    - build a debug or release version
    - execute unit tests

    The default is to build a debug version. If you want a release version, the cmdline should look
    something like this: 'nant build_release'
	</description>

    <property name="project.name" value="bbv.Common"/>
	
    <property name="svnusername" value="" readonly="false"  />
    <property name="svnpassword" value="" readonly="false"  />
  
    <property name="nant.settings.currentframework" value="net-4.0" />
  
    <property name="base_dir" value="${project::get-base-directory()}\.." readonly="true" />
	<property name="binaries" value="${base_dir}\Binaries" readonly="true" />
	<property name="sources" value="${base_dir}\Source" readonly="true" />
	<property name="publish" value="${base_dir}\Publish" readonly="true" />
	<property name="export" value="${base_dir}\Export" readonly="true" />
    <property name="tools_dir" value="${base_dir}\Tools" />
    <property name="xUnitConsole" value="${tools_dir}\xUnit\xunit.console.clr4.x86.exe" />
    <property name="mspec" value="${tools_dir}\mspec\mspec-clr4.exe" />
    <property name="svn" value="${tools_dir}\svn\svn.exe" />
    <property name="nuget.console" value="${tools_dir}\NuGet\nuget.exe" />
  
	<property name="version" value="0.0.0" />
	<property name="revision" value=".0" />
	<property name="release.version" value="${version}.${revision}" dynamic="true"/>

    <property name="build_config" value="Release" />
    <property name="build_succeeded" value="false" />
	<property name="parallelBuild" value="true" overwrite="false" readonly="false" />
	
	<sysinfo failonerror="false" />

	<!--
  =========================================================
  Main targets
  ========================================================= 
    -->
	<target name="integrate" depends="clean, build_release, copy_bin, unittest" 
	        description="Build and exectute unit tests for developers before commit their changes.">
	</target>
	
	<target name="publish" depends="clean, setupSvnCredentials" 
	        description="Builds a publish version with version number.">
        <mkdir dir="${publish}" />
   
        <call target="set_version" />  
        <call target="build_release" />
		<call target="unittest" />
		<call target="copy_bin" />
		<call target="build" />
		<call target="copy_bin" />
		<call target="revert_version" />
		<call target="release_notes" />
		<call target="exportsourcecode" />
		<call target="package" />
		<call target="nuget" />

		<sleep milliseconds="10" /> <!-- due to timing issues with the file system (random fails) -->
		<delete dir="${export}" includeemptydirs="true" />

		<echo message="built version ${version}.${revision}." />
	</target>
	
	<!--
  =========================================================
  Build targets
  ========================================================= 
    -->
	<target name="build" description="Builds a debug version">
		<property name="build_config" value="Debug" />
		<call target="build_bbvCommon" />
	</target>

	<target name="build_release" description="Builds a release version">
		<call target="build_bbvCommon" />
	</target>	
	
	<!--
  =========================================================
  internal targets
  ========================================================= 
   -->
	<target name="setupSvnCredentials" unless="${string::get-length(svnusername) == 0}" >
		<exec program="${svn}" commandline="log -l 1 --username ${svnusername} --password ${svnpassword} --non-interactive" />
	</target>	

	<target name="clean" description="Cleans all files">
		<echo message="Starting cleaning of solutions" />
		<delete failonerror="false">
			<fileset basedir="${publish}">
				<include name="**/*" />
			</fileset>
		</delete>	
		<foreach item="Folder" property="foldername">
			<in>
				<items basedir="${sources}">					
					<include name="**/bin" />
				</items>
			</in>
			<do>
				<delete dir="${foldername}" failonerror="false" />
			</do>
		</foreach>
		<echo message="Completion cleaning of solutions" />
	</target>	
	
	<target name="build_bbvCommon" description="Builds all projects of the bbv.Common solution">	
		<echo message="Starting compilation of solutions" />
		<tstamp />
		<property name="maxcpucount" value="" />
		<if test="${environment::variable-exists('MAX_CPU_COUNT')}">
			<property name="maxcpucount" value="/maxcpucount:${environment::get-variable('MAX_CPU_COUNT')}" />
		</if>
		<echo message="Max CPU count is ${maxcpucount}." />
		<property name="msBuild.exe" value="${framework::get-framework-directory('net-4.0')}/msbuild.exe" />
		<property name="standardargs" value="/p:Configuration=${build_config} /p:Platform=&quot;Any CPU&quot; /verbosity:minimal /fileLogger /fileLoggerParameters:LogFile=${base_dir}/msbuild.log" />
		<choose>
			<when test="${parallelBuild}">
				<exec program="${msBuild.exe}" failonerror="true">
					<arg value="${sources}/${project.name}.sln"/>
					<arg line="${standardargs} /m ${maxcpucount}"/>
				</exec>		
			</when>
			<otherwise>
				<exec program="${msBuild.exe}" failonerror="true">
					<arg value="${sources}/${project.name}.sln"/>
					<arg line="${standardargs}"/>
				</exec>	
			</otherwise>
		</choose>
		<echo message="Time: ${tstamp.time}" />
		<property name="build_succeeded" value="true" />
		<echo message="Completed compilation of solutions" />
	</target>

	<target name="unittest" description="Execute unit tests.">
        <echo message="---- run NUnit tests" />
        <nunit2>
			<formatter type="Plain" />
			<test>
				<assemblies basedir="${sources}">
					<include name="**/bin/${build_config}/*Test.dll" />
				</assemblies>
			</test>
		</nunit2>

        <echo message="---- run xUnit tests" />
        <foreach item="File" property="filename">
            <in>
                <items basedir="${base_dir}">
                    <include name="**/bin/${build_config}/*Test.dll" />
                </items>
            </in>
            <do>
                <exec program="${xUnitConsole}" commandline="${filename}" />
            </do>
        </foreach>

        <echo message="---- run MSpec" />
        <foreach item="File" property="filename">
            <in>
                <items basedir="${base_dir}">
                    <include name="**/bin/${build_config}/*Specification.dll" />
                </items>
            </in>
            <do>
                <exec program="${mspec}" commandline="--html ${binaries}\${path::get-file-name(filename)}.html --teamcity ${filename}" />
            </do>
        </foreach>
	</target>

	<target name="copy_bin" description="Copies the builded output to the top bin directory" if="${build_succeeded}">
		<delete>
			<fileset basedir="${binaries}\${build_config}">
				<include name="*.dll" />
				<include name="*.xml" />
				<include name="*.pdb" />
			</fileset>
		</delete>
		<copy overwrite="false" todir="${binaries}\${build_config}\" flatten="true">
			<fileset basedir="${sources}">
				<include name="**/bin/${build_config}/*.dll" />
				<include name="**/bin/${build_config}/bbv.Common*.xml" />
				<include name="**/bin/${build_config}/bbv.Common*.pdb" />
			</fileset>
		</copy>
	</target>

	<target name="package">
		<zip zipfile="${publish}\${project.name}-Binaries-${version}.${revision}.zip">
			<fileset basedir="${binaries}">
				<include name="**/*" />
			</fileset>
		</zip>

		<zip zipfile="${publish}\${project.name}-Source-${version}.${revision}.zip">
			<fileset basedir="${export}">
				<include name="**/*" />
			</fileset>
		</zip>
	</target>
	
	<target name="nuget" description="Copies the nuget output to the top bin directory" >
		<property name="nuget.basedir" value="${publish}\NuGet\${project.name}\${release.version}\" />
		<mkdir dir="${nuget.basedir}" />
		<delete>
			<fileset basedir="${nuget.basedir}\lib\NET35">
				<include name="*.dll" />
				<include name="*.xml" />
				<include name="*.pdb" />
			</fileset>
		</delete>
		<copy overwrite="false" todir="${nuget.basedir}\lib\NET35" flatten="true">
			<fileset basedir="${binaries}\Release">
				<include name="**/bbv.Common*.dll" />
				<include name="**/bbv.Common*.xml" />
				<include name="**/bbv.Common*.pdb" />
				<exclude name="**/bbv.Common*.Test.*" />
				<exclude name="**/bbv.Common*.Sample*" />
				<exclude name="**/bbv.Common*.Specification.*" />
			</fileset>
		</copy>
		<copy overwrite="false" todir="${nuget.basedir}">
			<fileset basedir="${base_dir}\Scripts\">
				<include name="${project.name}.nuspec" />
				<include name="License.txt" />
			</fileset>
		</copy>
		<xmlpoke file="${nuget.basedir}\${project.name}.nuspec" xpath="/package/metadata/version" value="${release.version}" />
		<exec program="${nuget.console}" commandline="pack ${nuget.basedir}\${project.name}.nuspec" />
		<move todir="${publish}\NuGet\">
			<fileset basedir="${base_dir}\Scripts\">
				<include name="*.nupkg" />
			</fileset>
		</move>
	</target>

	<target name="set_version" depends="get_headrevision" description="adds the svn revision to the GlobalAssemblyInfo.cs.">
		<!-- 
        [assembly: AssemblyVersion("?.?.?.?")]
        [assembly: AssemblyFileVersion("?.?.?.?")]
        -->
        <delete file="${binaries}\Versions.txt" />
    
		<loadfile file="${base_dir}\Scripts\Version.txt" property="version" />
		<loadfile file="${base_dir}\Scripts\VersionTypeNumeric.txt" property="versionTypeNumeric" />
		<property name="versionsfile" value="${base_dir}\Scripts\Versions.txt" />
		<foreach item="Line" in="${versionsfile}" delim="," property="directory,projrevision">
			<property name="infoname" value="${path::get-file-name(directory)}" />
			<asminfo language="CSharp" output="${sources}\${infoname}.VersionInfo.g.cs">
				<imports>
					<import namespace="System" />
					<import namespace="System.Reflection" />
				</imports>
				<attributes>
					<attribute type="AssemblyVersionAttribute" value="${version}.0.0" />
					<attribute type="AssemblyFileVersionAttribute" value="${version}.${projrevision}.${versionTypeNumeric}" />
				</attributes>
			</asminfo>

            <echo append="true" file="${binaries}\Versions.txt" 
	              message="${infoname} ${version}.${projrevision}.${versionTypeNumeric}${environment::newline()}" />
        </foreach>
		<delete file="${versionsfile}" />
	</target>

	<target name="revert_version" description="reverts the changes made to VersionAssemblyInfo.">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="${sources}\*.VersionInfo.g.cs" />
				</items>
			</in>
			<do>
        <echo message="reverting ${filename}"/>
				<exec program="${svn}" commandline="revert ${filename}" />
			</do>
		</foreach>
	</target>

	<target name="get_headrevision" description="gets the head revision from subversion.">
		<foreach item="Folder" property="foldername">
			<in>
				<items>
					<exclude name="${sources}\bbv.Common.Test" />
					<exclude name="${sources}\bbv.Common.*.Test" />
					<exclude name="${sources}\bbv.Common.*.Specification" />
                    <exclude name="${sources}\bbv.Common.*.Sample" />
                    <exclude name="${sources}\.*" />
					<include name="${sources}\bbv.Common*" />
				</items>
			</in>
			<do>
				<echo message="${foldername}" />
				<loadfile file="${foldername}\Version.txt" property="version" />
				<property name="tempfile" value="${foldername}\_version.txt" />
				<exec program="${svn}" commandline="info --xml --revision HEAD ${foldername}" output="${tempfile}" />
				<xmlpeek file="${tempfile}" property="revision" xpath="/info/entry/commit/@revision" />
				<delete file="${tempfile}" />
				<echo append="true" file="${base_dir}\Scripts\Versions.txt" message="${foldername},${version}.${revision}${environment::newline()}" />
			</do>
		</foreach>

        <!-- save head revision in ${revision} to version release -->
        <property name="tempfile" value="${publish}\_version.txt" />
        <exec program="${svn}" commandline="info --xml --revision HEAD ${base_dir}" output="${tempfile}" />
        <xmlpeek file="${tempfile}" property="revision" xpath="/info/entry/commit/@revision" />
        <delete file="${tempfile}" />
	</target>

	<target name="release_notes">

		<exec program="${svn}" commandline="log ${base_dir} -r HEAD:1 --xml" output="${binaries}\Revisions.xml" />
		<exec program="${base_dir}\Tools\nxslt3\nxslt3" 
		      commandline="${binaries}\Revisions.xml ${base_dir}\Scripts\ReleaseNotes.xsl -o ${binaries}\ReleaseNotes.html"/>
		<exec program="${svn}" commandline="log ${base_dir} -r HEAD:1" output="${publish}\ChangeLog-${version}.${revision}.txt" />
		<delete file="${binaries}\Revisions.xml" />
	</target>

	<target name="exportsourcecode">
		<exec program="${svn}" commandline="export ..\. ..\Export --force" />
	</target>

</project>